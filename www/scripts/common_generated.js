// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Msg = Msg || {};

/**
 * @const
 * @namespace
 */
Msg.Common = Msg.Common || {};

/**
 * @constructor
 */
Msg.Common.Vec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Msg.Common.Vec3}
 */
Msg.Common.Vec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Msg.Common.Vec3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
Msg.Common.Vec3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
Msg.Common.Vec3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
Msg.Common.Vec3.createVec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
Msg.Common.Quaternion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Msg.Common.Quaternion}
 */
Msg.Common.Quaternion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Msg.Common.Quaternion.prototype.a = function() {
  return this.bb.readInt8(this.bb_pos);
};

/**
 * @returns {number}
 */
Msg.Common.Quaternion.prototype.b = function() {
  return this.bb.readInt8(this.bb_pos + 1);
};

/**
 * @returns {number}
 */
Msg.Common.Quaternion.prototype.c = function() {
  return this.bb.readInt8(this.bb_pos + 2);
};

/**
 * @returns {number}
 */
Msg.Common.Quaternion.prototype.d = function() {
  return this.bb.readInt8(this.bb_pos + 3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @returns {flatbuffers.Offset}
 */
Msg.Common.Quaternion.createQuaternion = function(builder, a, b, c, d) {
  builder.prep(1, 4);
  builder.writeInt8(d);
  builder.writeInt8(c);
  builder.writeInt8(b);
  builder.writeInt8(a);
  return builder.offset();
};

// Exports for Node.js and RequireJS
this.Msg = Msg;
