// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Msg = Msg || {};

/**
 * @const
 * @namespace
 */
Msg.Down = Msg.Down || {};

/**
 * @enum {number}
 */
Msg.Down.MsgContent = {
  NONE: 0,
  LAUpdate: 1
};

/**
 * @enum {string}
 */
Msg.Down.MsgContentName = {
  0: 'NONE',
  1: 'LAUpdate'
};

/**
 * @constructor
 */
Msg.Down.Vec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Msg.Down.Vec3}
 */
Msg.Down.Vec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Msg.Down.Vec3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
Msg.Down.Vec3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
Msg.Down.Vec3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
Msg.Down.Vec3.createVec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
Msg.Down.LAUpdate = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Msg.Down.LAUpdate}
 */
Msg.Down.LAUpdate.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Msg.Down.LAUpdate=} obj
 * @returns {Msg.Down.LAUpdate}
 */
Msg.Down.LAUpdate.getRootAsLAUpdate = function(bb, obj) {
  return (obj || new Msg.Down.LAUpdate).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {Msg.Down.Vec3=} obj
 * @returns {Msg.Down.Vec3}
 */
Msg.Down.LAUpdate.prototype.values = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Msg.Down.Vec3).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
};

/**
 * @returns {number}
 */
Msg.Down.LAUpdate.prototype.valuesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Msg.Down.LAUpdate.startLAUpdate = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valuesOffset
 */
Msg.Down.LAUpdate.addValues = function(builder, valuesOffset) {
  builder.addFieldOffset(0, valuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Msg.Down.LAUpdate.startValuesVector = function(builder, numElems) {
  builder.startVector(12, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Msg.Down.LAUpdate.endLAUpdate = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valuesOffset
 * @returns {flatbuffers.Offset}
 */
Msg.Down.LAUpdate.createLAUpdate = function(builder, valuesOffset) {
  Msg.Down.LAUpdate.startLAUpdate(builder);
  Msg.Down.LAUpdate.addValues(builder, valuesOffset);
  return Msg.Down.LAUpdate.endLAUpdate(builder);
}

/**
 * @constructor
 */
Msg.Down.DownMsg = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Msg.Down.DownMsg}
 */
Msg.Down.DownMsg.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Msg.Down.DownMsg=} obj
 * @returns {Msg.Down.DownMsg}
 */
Msg.Down.DownMsg.getRootAsDownMsg = function(bb, obj) {
  return (obj || new Msg.Down.DownMsg).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {Msg.Down.MsgContent}
 */
Msg.Down.DownMsg.prototype.contentType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {Msg.Down.MsgContent} */ (this.bb.readUint8(this.bb_pos + offset)) : Msg.Down.MsgContent.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
Msg.Down.DownMsg.prototype.content = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Msg.Down.DownMsg.startDownMsg = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Msg.Down.MsgContent} contentType
 */
Msg.Down.DownMsg.addContentType = function(builder, contentType) {
  builder.addFieldInt8(0, contentType, Msg.Down.MsgContent.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} contentOffset
 */
Msg.Down.DownMsg.addContent = function(builder, contentOffset) {
  builder.addFieldOffset(1, contentOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Msg.Down.DownMsg.endDownMsg = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Msg.Down.DownMsg.finishDownMsgBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Msg.Down.MsgContent} contentType
 * @param {flatbuffers.Offset} contentOffset
 * @returns {flatbuffers.Offset}
 */
Msg.Down.DownMsg.createDownMsg = function(builder, contentType, contentOffset) {
  Msg.Down.DownMsg.startDownMsg(builder);
  Msg.Down.DownMsg.addContentType(builder, contentType);
  Msg.Down.DownMsg.addContent(builder, contentOffset);
  return Msg.Down.DownMsg.endDownMsg(builder);
}

// Exports for Node.js and RequireJS
this.Msg = Msg;
